#labels bitlyj2.0,Featured
#Bitlyj 2 quickstart.

= Introduction =

*Bitlyj 2 is still beta.*

First off, imports:

{{{
import com.rosaloves.bitlyj.*;
import static com.rosaloves.bitlyj.Bitly.*
}}}

The first will expose, among other things, all types that will result from the core methods (those supported directly in bitlyj). The static import brings in support for the DSL. You don't have to use it like this, but it's quite nice.

The quickest way to shorten a URL:

{{{
as("bitlyapidemo", "R_0da49e0a9118ff35f52f629d2d71bf07").call(shorten("http://rosaloves.com/"));
}}}

Breaking it down, `as` is a factory method for retrieving a Shortener instance.

{{{
Shortener bitly = as("bitlyapidemo", "R_0da49e0a9118ff35f52f629d2d71bf07");
}}}

It's static so as to support a nice DSL-like interface. If you for some reason prefer verbosity, you can qualify it more fully:

{{{
Shortener bitly = Bitly.as("bitlyapidemo", "R_0da49e0a9118ff35f52f629d2d71bf07");
}}}

Once you have a shortener, you can call methods on it:

{{{
bitly.call(shorten("http://rosaloves.com/"));
}}}

Like `as`, `shorten` is also part of the DSL interface. Peruse [http://code.google.com/p/bitlyj/source/browse/#svn/trunk/src/main/java/com/rosaloves/bitlyj Methods.java] for an accurate list of DSL methods.